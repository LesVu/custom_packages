diff --git a/Cargo.lock b/Cargo.lock
index eb69daa23..555696de4 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -46,6 +46,12 @@ dependencies = [
  "memchr",
 ]
 
+[[package]]
+name = "android_log-sys"
+version = "0.3.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5ecc8056bf6ab9892dcd53216c83d1597487d7dacac16c8df6b877d127df9937"
+
 [[package]]
 name = "anti_tamper"
 version = "0.1.0"
@@ -226,6 +232,7 @@ dependencies = [
 name = "base"
 version = "0.1.0"
 dependencies = [
+ "android_log-sys",
  "audio_streams",
  "base_event_token_derive",
  "cfg-if",
diff --git a/base/Cargo.toml b/base/Cargo.toml
index cdaaf10c0..307253e7d 100644
--- a/base/Cargo.toml
+++ b/base/Cargo.toml
@@ -42,6 +42,7 @@ protos = { path = "../protos", features = ["composite-disk"] }
 
 [target.'cfg(any(target_os = "android", target_os = "linux"))'.dependencies]
 minijail = "*"
+android_log-sys = "0.3.1"
 
 [target.'cfg(windows)'.dependencies]
 protobuf = "3.2"
diff --git a/build-termux.sh b/build-termux.sh
new file mode 100755
index 000000000..168706b45
--- /dev/null
+++ b/build-termux.sh
@@ -0,0 +1,6 @@
+#!/data/data/com.termux/files/usr/bin/bash
+export RUSTFLAGS="-C link-arg=-landroid-cutils"
+
+export CFLAGS="-llog -landroid-cutils -Wno-unused-command-line-argument -target aarch64-unknown-linux-android30"
+
+cargo build --features "android-sparse audio_cras config-file composite-disk crash-report default ffmpeg gdb geniezone gfxstream gfxstream_stub libvda-stub net noncoherent-dma pci-hotplug power-monitor-powerd registered_events slirp swap trace_marker video-decoder video-encoder virgl_renderer vtpm wl-dmabuf balloon gunyah qcow usb audio default-no-sandbox" --release
diff --git a/jail/build.rs b/jail/build.rs
index eb4f12eff..f4ec2cf85 100644
--- a/jail/build.rs
+++ b/jail/build.rs
@@ -38,13 +38,25 @@ fn compile_policy(
             .file_name()
             .unwrap(),
     );
-    let status = Command::new(compile_script)
-        .arg("--arch-json")
-        .arg(output_folder.join("constants.json"))
-        .arg("--default-action")
-        .arg("trap")
-        .arg(policy_file.path())
-        .arg(&output_file_path)
+    let status = Command::new("bash")
+.arg("-c")
+.arg(format!("{} {} {} {} {} {} {}", 
+    compile_script.to_string_lossy(),
+    "--arch-json",
+    output_folder.join("constants.json").to_string_lossy(),
+    "--default-action",
+    "trap",
+    policy_file.path().to_string_lossy(),
+    &output_file_path.to_string_lossy()
+))
+        // .arg("-c")
+        // .arg(compile_script)
+        // .arg("--arch-json")
+        // .arg(output_folder.join("constants.json"))
+        // .arg("--default-action")
+        // .arg("trap")
+        // .arg(policy_file.path())
+        // .arg(&output_file_path)
         .spawn()
         .unwrap()
         .wait()
diff --git a/swap/Cargo.toml b/swap/Cargo.toml
index 3833a6e69..58dd88ed4 100644
--- a/swap/Cargo.toml
+++ b/swap/Cargo.toml
@@ -33,8 +33,6 @@ vm_memory = { path = "../vm_memory" }
 
 [target.'cfg(any(target_os = "android", target_os = "linux"))'.dependencies]
 libc = "*"
-
-[target.'cfg(target_os="linux")'.dependencies]
 userfaultfd = { version = "0.8.1", optional = true }
 userfaultfd-sys = { version = "0.5.0", optional = true }
 
diff --git a/tools/install-deps b/tools/install-deps
index bc74b1347..a30e08171 100755
--- a/tools/install-deps
+++ b/tools/install-deps
@@ -4,97 +4,80 @@
 # found in the LICENSE file.
 set -ex
 
-sudo apt-get install --yes --no-install-recommends \
-    black \
+apt-get install --yes \
     ca-certificates \
     clang \
-    cloud-image-utils \
+    rust \
     curl \
-    dpkg-dev \
     expect \
-    g++ \
-    gcc \
     git \
     jq \
-    libavcodec-dev \
-    libavutil-dev \
-    libcap-dev \
-    libclang-dev \
-    libdbus-1-dev \
-    libdrm-dev \
-    libepoxy-dev \
-    libglib2.0-dev \
-    libguestfs-tools \
-    libslirp-dev \
-    libssl-dev \
-    libswscale-dev \
-    libva-dev \
-    libwayland-dev \
-    libxext-dev \
+    ffmpeg \
+    libcap \
+    dbus \
+    libdrm \
+    libepoxy \
+    glib \
+    libslirp \
+    openssl \
+    libwayland \
+    libxext \
     lld \
     make \
-    meson \
-    mypy \
+    mesa \
     nasm \
-    ncat \
-    ninja-build \
-    openssh-client \
-    pipx \
+    nmap-ncat \
+    ninja \
+    openssh \
     pkg-config \
-    protobuf-compiler \
-    python3 \
-    python3-argh \
-    python3-pip \
-    python3-rich \
-    qemu-system-x86 \
+    protobuf \
+    python \
+    python-pip \
     rsync \
     screen \
     strace \
     tmux \
-    wayland-protocols \
-    wget
+    libwayland-protocols \
+    wget \
+    libglvnd-dev \
+    glfw \
+    libx11 \
+    mesa \
+    xorgproto
+
+pip install black meson argh rich pipx mypy
 
 # mdformat is not available as a debian package. Install via pipx instead.
 pipx install mdformat
 pipx inject mdformat mdformat-gfm mdformat-footnote
 pipx ensurepath
 
-# Install rustup if not available yet
-if ! command -v rustup &>/dev/null; then
-    wget "https://static.rust-lang.org/rustup/archive/1.25.1/x86_64-unknown-linux-gnu/rustup-init"
-    echo "5cc9ffd1026e82e7fb2eec2121ad71f4b0f044e88bca39207b3f6b769aaa799c *rustup-init" | sha256sum -c -
-    chmod +x rustup-init
-    ./rustup-init -y --no-modify-path --profile minimal --default-toolchain none
-    source ${CARGO_HOME:-~/.cargo}/env
-    rm rustup-init
-fi
-
 # Install required rust components.
 # This will also ensure the toolchain required by ./rust-toolchain is installed.
-rustup component add cargo clippy rustfmt
+#rustup component add cargo clippy rustfmt
 
 # LLVM tools are used to generate and process coverage files
-rustup component add llvm-tools-preview
+#rustup component add llvm-tools-preview
 
 # Allow cross-compilation via mingw64
-rustup target add x86_64-pc-windows-gnu
+#rustup target add x86_64-pc-windows-gnu
 
 # Install nightly toolchain. Only used for rustfmt
-rustup toolchain install nightly --profile minimal --component rustfmt
+#rustup toolchain install nightly --profile minimal --component rustfmt
 
 # Cargo extension to install binary packages from github
-curl -L https://github.com/cargo-bins/cargo-binstall/releases/download/v1.4.4/cargo-binstall-x86_64-unknown-linux-gnu.tgz | tar -xzvvf - -C ${CARGO_HOME:-~/.cargo}/bin
+# curl -L https://github.com/cargo-bins/cargo-binstall/releases/download/v1.4.4/cargo-binstall-x86_64-unknown-linux-gnu.tgz | tar -xzvvf - -C ${CARGO_HOME:-~/.cargo}/bin
 
 # The bindgen tool is required to build a crosvm dependency.
-cargo binstall --no-confirm bindgen-cli --version "0.68.1"
+cargo install bindgen-cli --version "0.68.1"
 
 # binutils are wrappers to call the rustup bundled versions of llvm tools.
-cargo binstall --no-confirm cargo-binutils
+#cargo binstall --no-confirm cargo-binutils
 
 # The mdbook and mdbook-mermaid tools are used to build the crosvm book.
-cargo binstall --no-confirm mdbook --version "0.4.25"
-cargo binstall --no-confirm mdbook-mermaid --version "0.12.6"
-cargo binstall --no-confirm mdbook-linkcheck --version "0.7.7"
-
-# Nextest is an improved test runner for cargo
-cargo binstall --no-confirm cargo-nextest --version "0.9.49"
+# cargo binstall --no-confirm mdbook --version "0.4.25"
+# cargo binstall --no-confirm mdbook-mermaid --version "0.12.6"
+# cargo binstall --no-confirm mdbook-linkcheck --version "0.7.7"
+#
+# # Nextest is an improved test runner for cargo
+# cargo binstall --no-confirm cargo-nextest --version "0.9.49"
