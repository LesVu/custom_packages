name: Build Fex

on:
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron: "0 0 1 * *"
  workflow_dispatch:

jobs:
  check-version:
    name: Check current up to date or not.
    runs-on: ubuntu-latest
    outputs:
      LATEST: ${{ steps.checks.outputs.LATEST }}
      VERSION: ${{ steps.checks.outputs.VERSION }}
    steps:
      - name: Check update
        id: checks
        run: |
          CURRENT_VERSION=$(curl -s https://raw.githubusercontent.com/LesVu/custom_debian_repo/main/debian/dists/bookworm/main/binary-arm64/Packages |\
          awk '/^Package: fex-emu/ {flag=1} flag && /^Version:/ {print $2; flag=0}' |\
          cut -d'.' -f1)
          LATEST_VERSION=$(curl -s https://api.github.com/repos/FEX-Emu/FEX/releases/latest |\
          jq -r '.tag_name')
          LATEST_VERSION_CUT=${LATEST_VERSION#FEX-}
          if [ "$CURRENT_VERSION" == "$LATEST_VERSION_CUT" ]; then
            echo "LATEST=True" >> "$GITHUB_OUTPUT"
          else
            echo "LATEST=False" >> "$GITHUB_OUTPUT"
            echo "VERSION=$LATEST_VERSION" >> "$GITHUB_OUTPUT"
          fi
          echo "CURRENT_VERSION=$CURRENT_VERSION"
          echo "LATEST_VERSION_CUT=$LATEST_VERSION_CUT"
          echo "LATEST_VERSION=$LATEST_VERSION"

  build-fex:
    name: Build package on arm64
    needs: [check-version]
    if: needs.check-version.outputs.LATEST == 'False'
    runs-on: self-hosted

    steps:
      - name: checkout
        uses: actions/checkout@v4
      
      - name: checkout deb repo
        uses: actions/checkout@v4
        with:
          repository: "LesVu/custom_debian_repo"
          path: "debian"
          token: ${{ secrets.PAT }}

      - name: checkout Fex
        uses: actions/checkout@v4
        with:
          repository: FEX-Emu/FEX
          path: fex
          ref: ${{ needs.check-version.outputs.VERSION }}
          submodules: recursive

      - name: Install deps
        run: |
          sudo apt-get update && sudo apt-get install -q -y \
          git reprepro cmake ninja-build build-essential pkg-config ccache clang llvm lld binfmt-support \
          libsdl2-dev libepoxy-dev libssl-dev python3-setuptools g++-x86-64-linux-gnu \
          libgcc-12-dev-i386-cross libgcc-12-dev-amd64-cross nasm python3-clang \
          libstdc++-12-dev-i386-cross libstdc++-12-dev-amd64-cross libstdc++-12-dev-arm64-cross \
          squashfs-tools squashfuse libc-bin libc6-dev-i386-amd64-cross \
          lib32stdc++-12-dev-amd64-cross apt-utils qtdeclarative5-dev qml-module-qtquick-controls \
          qml-module-qtquick-controls2 qml-module-qtquick-dialogs

      - name: Build
        run: |
          mkdir -p artifacts
          cd fex
          mkdir Build
          cd Build
          CC=clang CXX=clang++ cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release -DUSE_LINKER=lld -DENABLE_LLD=True -DBUILD_TESTS=False -DENABLE_ASSERTIONS=False -G Ninja ..
          ninja
          cpack -G DEB -D CPACK_DEBIAN_PACKAGE_CONFLICTS="qemu-user-static, box64, box86"
          mv *.deb ../../artifacts

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: List GPG keys
        run: gpg -K

      - name: Write new package to repo
        run: |
          cd $GITHUB_WORKSPACE/debian
          reprepro -V -b ./debian --confdir ./conf --section other -C main includedeb bookworm ../artifacts/*.deb || echo "Failed to write new packages file"
          rm -rf ../artifacts/

      - name: Commit and push
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          file_pattern: "debian/*"
          repository: "debian"
