name: Build Packages

on:
  workflow_dispatch:
    inputs:
      package:
        required: false
        type: string
        description: "Package specified to build"
      git_uri:
        required: false
        type: string
        description: "Git repository to build"
      options:
        required: false
        type: string
        description: "Option passed"
      
jobs:
  package-debian:
    name: Build package on arm64
    runs-on: self-hosted
    timeout-minutes: 1440

    steps:
      - name: Input checks
        run: |
          if [ -z "${{ inputs.package }}" ] && [ -z "${{ inputs.git_uri }}" ]; then
            echo "One of package or git_uri must be specified"
            exit 1
          fi

      - name: Checkout this repo
        uses: actions/checkout@v4

      - name: Checkout deb repo
        uses: actions/checkout@v4
        with:
          repository: "LesVu/custom_debian_repo"
          path: "debian"
          token: ${{ secrets.PAT }}

      - name: Make ccache directory
        run: mkdir -p ~/.ccache

      - name: Restore cache files
        uses: actions/cache/restore@v4
        with:
          path: ~/.ccache
          key: build-ccache-

      - name: Setup
        run: |
          export DEBIAN_FRONTEND=noninteractive
          git config --global http.postBuffer 157286400
          sudo cat <<EOF | sudo tee "/etc/apt/sources.list.d/debian_src.sources" >/dev/null
          Types: deb-src
          URIs: http://deb.debian.org/debian
          Suites: unstable
          Components: main
          Signed-By: /usr/share/keyrings/debian-archive-keyring.gpg
          EOF
          sudo apt-get update && sudo apt-get install -q -y \
          git build-essential apt-utils git-buildpackage dh-autoreconf quilt dh-ocaml time libz3-dev cowbuilder pbuilder reprepro
          mkdir build-package
          cd build-package
          if [ -n "${{ inputs.git_uri }}" ]; then
            git clone ${{ inputs.git_uri }}
          fi
          if [ -n "${{ inputs.package }}" ]; then
            apt-get source ${{ inputs.package }}
          fi
          cd ..
          sudo cat <<'EOF' | sudo tee "/etc/pbuilderrc" >/dev/null 
          # the hook dir may already be set/populated!
          HOOKDIR="/etc/pbuilder/hook.d"
          export DEPS=/var/cache/pbuilder/deps/debian
          BINDMOUNTS=$DEPS
          EOF
          sudo mkdir -p /etc/pbuilder/hook.d/
          sudo cat <<'EOF' | sudo tee "/etc/pbuilder/hook.d/D10apt-ftparchive" >/dev/null 
          apt-get install --assume-yes apt-utils ca-certificates
          ( cd "$DEPS"; apt-ftparchive packages . > Packages )
          echo "deb [trusted=yes] file://$DEPS ./" >> /etc/apt/sources.list
          echo "deb [trusted=yes] https://lesvu.github.io/custom_debian_repo/debian bookworm main" >> /etc/apt/sources.list
          apt-get update
          EOF
          sudo chmod +x /etc/pbuilder/hook.d/D10apt-ftparchive
          sudo rm -rf /var/cache/pbuilder/deps/debian
          sudo mkdir -p /var/cache/pbuilder/deps/debian
          if [ -e "/var/cache/pbuilder/base.tgz" ]; then
            sudo pbuilder update
          else
            sudo pbuilder create --distribution bookworm
            echo "apt-mark hold hello hello-traditional" > command.sh
            sudo pbuilder execute --save-after-exec ./command.sh
          fi

      - name: Build
        run: |
          cd build-package
          input_string="${{inputs.package}}"
          if [ -n "${{ inputs.package }}" ]; then
            if [[ "$input_string" == *" "* ]]; then
              IFS=" " read -ra words <<< "$input_string"
              for word in "${words[@]}"; do
                sudo pbuilder build ${{ inputs.options }} ${word}*.dsc
                sudo rm -f /var/cache/pbuilder/result/*-dbg*.deb
                sudo cp /var/cache/pbuilder/result/*.deb /var/cache/pbuilder/deps/debian
              done
            else
              sudo pbuilder build ${{ inputs.options }} ${input_string}*.dsc
            fi
          fi
          if [ -n "${{ inputs.git_uri }}" ]; then
              cd ${input_string}*
              sudo GIT_PBUILDER_AUTOCONF=no GIT_PBUILDER_OPTIONS="${{inputs.options}}" BUILDER=pbuilder gbp buildpackage --git-pbuilder
              cd ..
          fi

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: List GPG keys
        run: gpg -K

      - name: Write new package to repo
        run: |
          sudo rm -f /var/cache/pbuilder/result/*-dbg*.deb
          cd $GITHUB_WORKSPACE/debian
          reprepro -V -b ./debian --confdir ./conf --section other -C main includedeb bookworm /var/cache/pbuilder/result/*.deb || echo "Failed to write new packages file"
          sudo rm -rf /var/cache/pbuilder/result/*

      - name: Commit and push
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          file_pattern: "debian/*"
          repository: "debian"

      - name: Get Date
        id: get-date
        run: echo "date=$(TZ='Asia/Singapore' /bin/date "+%I:%M%p_%d/%m/%Y")" >> $GITHUB_OUTPUT
        shell: bash

      - name: Save cache
        uses: actions/cache/save@v4
        if: always()
        with:
          path: ~/.ccache
          key: build-ccache-${{ steps.get-date.outputs.date }}
